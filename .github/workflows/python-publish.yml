# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish Python package

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.4
      - name: Install Dependencies
        run: poetry install --with dev
      - name: Check for version changes and create a tag
        run: |
          # Use poetry's python API to get the new version
          NEW_VER=$(poetry version -s)

          # Fetch tags
          git fetch --prune --tags

          # Check if tag already exists
          EXISTS=$(git tag -l | grep $NEW_VER)

          if [ -z "$EXISTS" ]; then
            echo "New version detected: $NEW_VER"

            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action"

            # Create a new tag
            git tag $NEW_VER

            # Push the tag to the remote repository
            git push origin $NEW_VER
          else
            echo "No new version detected"
            exit 0
          fi
      - name: Lint with pylint
        run: |
          poetry run pylint $(git ls-files '*.py')
      - name: Test with pytest
        run: |
          poetry run pytest src test
      - name: Build package
        run: poetry build
      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
